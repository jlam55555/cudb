var searchIndex = JSON.parse('{\
"cudb":{"doc":"Simple document-based NoSQL similar to MongoDB.  Final …","t":[0,0,0,0,11,0,0,11,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,7,7,7,6,6,5,11,11,12,11,11,12,11,11,11,12,12,11,11,11,11,11,13,13,4,6,8,13,13,13,6,13,13,13,13,13,13,13,4,6,3,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["crud","db","document","index","matches_document","mmapv1","query","remove_index_fields","value","Client","Collection","Database","add_document_to_indices","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","close","create_collection","declare_index","delete_collection","delete_many","delete_one","drop","find_all","find_many","find_one","from","from","from","from","get_best_index_schema","get_indices","get_mut_pool","get_pool","insert_many","insert_one","into","into","into","list_collections","list_databases","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_many","update_one","vzip","vzip","vzip","Document","borrow","borrow_mut","clone","clone_into","create_id","deserialize","eq","fmt","fmt","from","from","get","get_map","get_map_ref","get_or_default","insert","into","ne","new","serialize","to_owned","to_string","try_from","try_into","type_id","update_from","vzip","FieldSpec","Index","IndexSchema","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","create_index","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","generate_btree_ranges","get_as_hashmap","get_default","get_field_path","get_field_specs","get_fields","get_num_matched_fields","hash","hash","hash","into","into","into","is_conflicting","ne","ne","ne","new","new","partial_cmp","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Pool","TopLevelDocument","block","borrow","borrow","borrow_mut","borrow_mut","close","delete","drop","fetch","fetch_block_at_offset","fmt","fmt","fmt","from","from","get_block","get_doc","get_mut_doc","get_next_offset","get_size","into","into","new","read_indices","scan","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write_indices","write_new","Block","HEADER_SIZE","MAX_BLOCK_SIZE","MIN_BLOCK_SIZE","Offset","Size","alloc_size","borrow","borrow_mut","cap","clone","clone_into","del","fmt","from","into","len","off","to_owned","try_from","try_into","type_id","vzip","And","Asc","Constraint","ConstraintDocument","ConstraintDocumentTrait","Desc","Equals","Exclude","FieldPath","GreaterThan","In","Include","LessThan","MatchesDocument","Or","ProjectDocument","Projection","ProjectionDocument","Query","ResultOrder","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","fmt","from","from","from","from","generate_value_ranges","get_value_type","into","into","into","into","matches","matches_document","order","projection","remove_index_fields","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","1","1","0","0","0","Array","Dict","Id","Int32","String","Value","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","fmt","fmt","from","get_max_value","get_min_value","hash","into","is_variant_equal","ne","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0"],"q":["cudb","","","","","","","","","cudb::db","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::document","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::mmapv1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::mmapv1::block","","","","","","","","","","","","","","","","","","","","","","","cudb::query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::query::Constraint","","","","","","","","","cudb::query::Projection","cudb::query::ResultOrder","","cudb::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cudb::value::Value","","","",""],"d":["User-facing API for collection-level CRUD operations.","User-facing structural API of database.","Document model data representation.","B-tree indexing.","Check if a Document matches the constraints. If a Document …","A simple implementation of a mmapv1-like storage system.","User-facing query representation.","","Variant types for flexible JSON-like document values.","User API for connection/client-level actions.","User API for collection-level actions.","User API for database-level actions.","Add a document to all existing indices. If any Index is …","","","","","","","Close collection and underlying file pointers.","Create a collection in the database.","Create a B-tree index on a list of fields in the …","Delete a collection in the database.","Delete all documents that match the query.","Delete at most one document that matches the query.","Drop collection.","Fetch all documents from collection.","Fetch a vector of documents matching the query.","Fetch at most one document matching the query.","","","Create a collection from a path.","","Get the Index Schema that most closely matches the …","Get all indices created on this Collection.","Get the collection’s underlying pool mutably.","Get the collection’s underlying pool.","Insert a vector of documents.","Insert one document.","","","","List collections in the database.","List all databases on the server.","","","","","","","","","","Update all documents matching the query.","Update at most one document that matches the query.","","","","(Data) document (as opposed to query document, etc.) Note …","","","","","Create <code>_id</code> on document (non-recursively) if it doesn’t …","","","","","Construct a document from a hashmap.","","Retrieve the value given the path if it exists.","Get the hashmap from a document.","Get a reference to the hashmap from a document.","Retrieve the value given the path if it exists. Otherwise, …","Insert k,v pair into hashtable. If key already exists, the …","","","Construct a new document.","","","","","","","Update a document with the fields present in another …","","","Store the values for the fields for a particular document.","Store the fields used for an Index.","","","","","","","","","","","","","","Create an Index from the provided Document.","","","","","","","","","","","","","Calculate the non-overlapping b-tree query ranges for a …","Convert the Index Schema into a HashMap.","","","","","Count the number of matched index fields in the query …","","","","","","","Compare the current Index Schema with another Index Schema.","","","","","","","","","","","","","","","","","","","","","","","","","A linear collection of contiguous blocks.","A wrapper around a <code>Document</code> which contains pool allocation …","Represents a memory block: offset and size.","","","","","Close pool (closes open file).","Delete a block.","Delete pool (deletes file).","Fetch a top level document from a block address, ignoring …","Fetch a top level document from a block offset, reading …","","Prints a pool with all of its allocated blocks, for …","","","","Getter for block; note that the block is immutable, i.e., …","Getter for document.","Getter for document. The returned document reference is …","","Gets pool (file) size in bytes.","","","Create a new memory pool from a file, creating the file if …","","Linearly scan and retrieve all documents from the pool.","","","","","","","","","","Update document (including_header), return new document. …","Save indices to file.","Write a new document (including header), and return the …","Stores a memory block (for a single document).","Header size, in bytes.","Maximum block size including header, in bytes.","Minimum block size including header, in bytes. Prevents …","Indicates a memory offset from the beginning of the pool.","Indicates a memory size.","Get the real allocation size (capacity) for a given size …","","","Capacity of the block in bytes. Is always a power of two, …","","","Whether the block is deleted (for soft deletion).","","","","Length of the data in bytes (not including header). At …","Position of the header from the start of the pool.","","","","","","Conjunction of constraints on a single field.","Sorted ascending according to the given field.","A single query constraint on a field.","Document type modeling query constraints.","Exists so that we can implement functions on …","Sorted descending according to the given field.","Equality constraint on a value.","","","Greater-than constraint on a value.","Constraint if value is in specified list of values.","","Less-than constraint on a value.","Constraints on subdocuments (hashtables).","Disjunction of constraints on a single field.","","Projection of a single field of the projection document.","Projection of fields during a query (analogous to SQL …","Complete query operation.","The order that the results should be sorted in.","","","","","","","","","","","","","","","","","Generate the value range(s) for this constraint.","Determine the type of a constraint. Return None if the …","","","","","Whether a Value matches a constraint.","Returns whether the current constraint document matches a …","","","Constructs a reduced ConstraintDocument by removing the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Array types.","Recursive documents (hashtables).","Special type for unique identification, similar to MongoDB…","Fixed-size integer type.","Arbitrary-length strings.","Variant type for (data) document values.","","","","","Define a total ordering on all scalar values. Panics if …","","","","","","Returns inclusive maximum for range search on value.","Returns inclusive minimum for range search on value.","We do not allow indexing by a Document. Panics if a …","","Check if the provided Value is the same variant as the …","","We can only compare like scalar types (i.e., not documents …","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,1,0,0,0,0,2,3,4,2,3,4,2,2,4,2,4,2,2,2,2,2,2,3,4,2,2,2,2,2,2,2,2,3,4,2,4,3,3,4,2,3,4,2,3,4,2,2,2,3,4,2,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,6,7,8,6,7,8,6,7,8,6,7,8,8,7,6,7,8,6,7,8,6,7,8,6,7,8,7,7,6,6,7,7,7,6,7,8,6,7,8,7,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,6,7,8,0,0,0,9,10,9,10,10,10,10,10,10,9,10,10,9,10,9,9,9,10,10,9,10,10,10,10,10,9,10,9,10,9,10,9,10,10,10,10,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,0,0,0,13,12,14,0,12,12,14,12,12,12,14,0,0,0,0,13,14,15,12,13,14,15,12,12,12,15,12,13,14,15,12,12,12,13,14,15,12,12,16,15,15,16,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,17,18,19,20,21,22,23,22,23,24,25,26,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,30,31,32],"f":[null,null,null,null,[[["document",3]],["bool",15]],null,null,[[["indexschema",3]],["constraintdocument",6]],null,null,null,null,[[["topleveldocument",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["fieldspec"]],["fieldspec",3]]],[[]],[[["constraintdocument",6]]],[[["query",3]]],[[]],[[],[["vec",3,["document"]],["document",3]]],[[["query",3]],[["vec",3,["document"]],["document",3]]],[[["query",3]],[["option",4,["document"]],["document",3]]],[[]],[[]],[[["str",15]],["collection",3]],[[]],[[["indexschema",3]],[["option",4,["indexschema"]],["indexschema",3]]],[[],["hashmap",3]],[[],["pool",3]],[[],["pool",3]],[[["vec",3,["document"]],["document",3]]],[[["document",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["constraintdocument",6],["document",3]]],[[["document",3],["query",3]]],[[]],[[]],[[]],null,[[]],[[]],[[],["document",3]],[[]],[[],["bool",15]],[[],["result",4]],[[["document",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["hashmap",3,["string","value"]],["string",3],["value",4]],["document",3]],[[]],[[["fieldpath",6]],[["value",4],["option",4,["value"]]]],[[],[["hashmap",3,["string","value"]],["string",3],["value",4]]],[[],["hashmap",3]],[[["fieldpath",6],["value",4]],["value",4]],[[["string",3],["value",4]],[["value",4],["option",4,["value"]]]],[[]],[[["document",3]],["bool",15]],[[],["document",3]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["document",3]]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["fieldspec",3]],[[],["indexschema",3]],[[],["index",3]],[[]],[[]],[[]],[[["index",3]],["ordering",4]],[[["document",3]],[["index",3],["option",4,["index"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["fieldspec",3]],["bool",15]],[[["indexschema",3]],["bool",15]],[[["index",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["constraintdocument",6]],["vec",3]],[[],[["hashmap",3,["fieldpath","value"]],["fieldpath",6],["value",4]]],[[],["value",4]],[[],["fieldpath",6]],[[],["vec",3]],[[],[["vec",3,["fieldpath"]],["fieldpath",6]]],[[["hashmap",3]],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexschema",3]],["bool",15]],[[["fieldspec",3]],["bool",15]],[[["indexschema",3]],["bool",15]],[[["index",3]],["bool",15]],[[["value",4],["fieldpath",6]],["fieldspec",3]],[[["vec",3,["fieldspec"]],["fieldspec",3]],["indexschema",3]],[[["index",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[["block",3]]],[[]],[[["block",3]],["topleveldocument",3]],[[["offset",6]],["topleveldocument",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["block",3]],[[],["document",3]],[[],["document",3]],[[["document",3]],["topleveldocument",3]],[[],["usize",15]],[[]],[[]],[[["path",3]],["pool",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["vec",3,["topleveldocument"]],["topleveldocument",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["topleveldocument",3]]],[[]],[[["document",3]],["topleveldocument",3]],null,null,null,null,null,null,[[["size",6]],["size",6]],[[]],[[]],null,[[],["block",3]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["constraint",4]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],[["value",4],["option",4,["value"]]]],[[]],[[]],[[]],[[]],[[["value",4]],["bool",15]],[[["document",3]],["bool",15]],null,null,[[["indexschema",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["value",4]],[[]],[[],["ordering",4]],[[],["result",4]],[[["value",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["value",4]],["bool",15]],[[["value",4]],["bool",15]],[[],[["ordering",4],["option",4,["ordering"]]]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null],"p":[[6,"ConstraintDocument"],[3,"Collection"],[3,"Client"],[3,"Database"],[3,"Document"],[3,"FieldSpec"],[3,"IndexSchema"],[3,"Index"],[3,"TopLevelDocument"],[3,"Pool"],[3,"Block"],[4,"Constraint"],[4,"ResultOrder"],[4,"Projection"],[3,"Query"],[8,"ConstraintDocumentTrait"],[13,"MatchesDocument"],[13,"Equals"],[13,"LessThan"],[13,"GreaterThan"],[13,"In"],[13,"Or"],[13,"And"],[13,"ProjectDocument"],[13,"Asc"],[13,"Desc"],[4,"Value"],[13,"Id"],[13,"Int32"],[13,"String"],[13,"Dict"],[13,"Array"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};